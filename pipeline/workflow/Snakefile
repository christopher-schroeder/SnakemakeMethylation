from snakemake.utils import min_version
min_version("6.0.5")

import yaml

configfile: "config/config.yaml"

# Allow users to fix the underlying OS via singularity.
# container: "docker://continuumio/miniconda3"

include: "rules/common.smk"
include: "rules/ref.smk"
include: "rules/trimming.smk"
include: "rules/mapping.smk"
include: "rules/calling.smk"
include: "rules/qc.smk"
include: "rules/metilene.smk"
include: "rules/annotation.smk"
include: "rules/pca.smk"


groups = samples["group"].unique()

# batches = "all"
# if is_activated("report/stratify"):
#     batches = samples[config["report"]["stratify"]["by-column"]].unique()


rule only_trimming:
    input:
        expand("results/merged/{sample}_{read}.fastq.gz", sample=samples["sample_name"], read=["R1", "R2"])


rule only_mapping:
    input:
        expand("results/mapped/{sample}.bam", sample=samples["sample_name"])


rule only_methylation:
    input:
        expand("results/methylation/{sample}_CpG.bedGraph", sample=samples["sample_name"])


rule only_qc:
    input:
        expand("results/qc/bamqc/{sample}/qualimapReport.html", sample=samples["sample_name"])


rule only_chh_bias:
    input:
        expand("results/qc/chh_bias/{sample}.chh_bias.bed", sample=samples["sample_name"])


rule only_conversion_rate:
    input:
        expand("results/qc/conversion_rate/{sample}.tsv", sample=samples["sample_name"])


rule only_metilene:
    input:
        expand("results/dmr/metilene/dmrs/{experiment}.table.tsv", experiment=experiments)


rule only_pca:
    input:
        "results/plots/pca.pdf"

# print(expand("results/dmr/metilene/dmrs/{experiment}.table.tsv", experiment=experiments))

rule all:
    input:
        rules.only_methylation.input,
        rules.only_qc.input,